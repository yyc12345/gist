/*

COPYRIGHT WARNING

This file is not follwoing this project's LICENSE.
These code comes from AheadLib project. If you want
to use it, you should follow AheadLib's License.

*/
#include <Windows.h>
#include <cassert>
#include "UsedShit.h"

#define NORMALEXPORT __declspec(dllexport) __declspec(naked)
#define HANDEXPORT __declspec(dllexport)

HMODULE m_CK2Module = NULL;
HMODULE m_VxMathModule = NULL;

inline BOOL WINAPI Load()
{
    TCHAR tzPath[MAX_PATH];

    lstrcpy(tzPath, TEXT("CK2.dll"));
    m_CK2Module = LoadLibrary(tzPath);
    lstrcpy(tzPath, TEXT("VxMath.dll"));
    m_VxMathModule = LoadLibrary(tzPath);
    return (m_CK2Module != NULL) && (m_VxMathModule != NULL);	
}
    
inline VOID WINAPI Free()
{
    if (m_CK2Module)
        FreeLibrary(m_CK2Module);
    if (m_VxMathModule)
        FreeLibrary(m_VxMathModule);
}

FARPROC WINAPI GetAddress(HMODULE module, PCSTR pszProcName)
{
    FARPROC fpAddress;
    fpAddress = GetProcAddress(module, pszProcName);
    assert(fpAddress != NULL);
    return fpAddress;
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hModule);
		return Load();
	}
	else if (dwReason == DLL_PROCESS_DETACH)
	{
		Free();
	}

	return TRUE;
}




NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000()
{
    //keep
    //function: void __cdecl CKStoreDeclaration(class XArray<class CKObjectDeclaration *> *,class CKObjectDeclaration *)
	GetAddress(m_CK2Module, "?CKStoreDeclaration@@YAXPAV?$XArray@PAVCKObjectDeclaration@@@@PAVCKObjectDeclaration@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetAuthorName(char *)
	GetAddress(m_CK2Module, "?SetAuthorName@CKObjectDeclaration@@QAEXPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetAuthorGuid(struct CKGUID)
	GetAddress(m_CK2Module, "?SetAuthorGuid@CKObjectDeclaration@@QAEXUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetGuid(struct CKGUID)
	GetAddress(m_CK2Module, "?SetGuid@CKObjectDeclaration@@QAEXUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetCategory(char *)
	GetAddress(m_CK2Module, "?SetCategory@CKObjectDeclaration@@QAEXPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetDescription(char *)
	GetAddress(m_CK2Module, "?SetDescription@CKObjectDeclaration@@QAEXPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006()
{
    //redirect
    //need: public: void __thiscall CKObjectDeclaration::SetCreationFunction(long (__cdecl*)(class CKBehaviorPrototype * *))
    //point to: public: void __thiscall CKObjectDeclaration::SetCreationFunction(int (__cdecl*)(class CKBehaviorPrototype * *))
    //          
	GetAddress(m_CK2Module, "?SetCreationFunction@CKObjectDeclaration@@QAEXP6AJPAPAVCKBehaviorPrototype@@@Z@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007()
{
    //redirect
    //need: public: void __thiscall CKObjectDeclaration::SetVersion(unsigned long)
    //point to: public: void __thiscall CKObjectDeclaration::SetVersion(unsigned int)
    //          
	GetAddress(m_CK2Module, "?SetVersion@CKObjectDeclaration@@QAEXK@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::SetType(int)
	GetAddress(m_CK2Module, "?SetType@CKObjectDeclaration@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009()
{
    //keep
    //function: class CKObjectDeclaration * __cdecl CreateCKObjectDeclaration(char *)
	GetAddress(m_CK2Module, "?CreateCKObjectDeclaration@@YAPAVCKObjectDeclaration@@PAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010()
{
    //keep
    //function: public: void __thiscall CKBehaviorPrototype::SetFunction(int (__cdecl*)(struct CKBehaviorContext const &))
	GetAddress(m_CK2Module, "?SetFunction@CKBehaviorPrototype@@QAEXP6AHABUCKBehaviorContext@@@Z@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011()
{
    //keep
    //function: public: void __thiscall CKBehaviorPrototype::SetFlags(enum CK_BEHAVIORPROTOTYPE_FLAGS)
	GetAddress(m_CK2Module, "?SetFlags@CKBehaviorPrototype@@QAEXW4CK_BEHAVIORPROTOTYPE_FLAGS@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012()
{
    //keep
    //function: class CKBehaviorPrototype * __cdecl CreateCKBehaviorPrototypeRunTime(char *)
	GetAddress(m_CK2Module, "?CreateCKBehaviorPrototypeRunTime@@YAPAVCKBehaviorPrototype@@PAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013()
{
    //keep
    //function: public: void __thiscall CKBehavior::ActivateOutput(int,int)
	GetAddress(m_CK2Module, "?ActivateOutput@CKBehavior@@QAEXHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014()
{
    //redirect
    //need: public: long __cdecl CKContext::OutputToConsoleExBeep(char *,...)
    //point to: public: int __cdecl CKContext::OutputToConsoleExBeep(char *,...)
    //          
	GetAddress(m_CK2Module, "?OutputToConsoleExBeep@CKContext@@QAAJPADZZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015()
{
    //keep
    //function: public: void * __thiscall CKBehavior::GetInputParameterReadDataPtr(int)
	GetAddress(m_CK2Module, "?GetInputParameterReadDataPtr@CKBehavior@@QAEPAXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016()
{
    //redirect
    //need: public: long __thiscall CKBehavior::GetInputParameterValue(int,void *)
    //point to: public: int __thiscall CKBehavior::GetInputParameterValue(int,void *)
    //          
	GetAddress(m_CK2Module, "?GetInputParameterValue@CKBehavior@@QAEJHPAX@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017()
{
    //keep
    //function: public: class CKBaseManager * __thiscall CKContext::GetManagerByGuid(struct CKGUID)
	GetAddress(m_CK2Module, "?GetManagerByGuid@CKContext@@QAEPAVCKBaseManager@@UCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018()
{
    //keep
    //function: public: void __thiscall CKBehavior::ActivateInput(int,int)
	GetAddress(m_CK2Module, "?ActivateInput@CKBehavior@@QAEXHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019()
{
    //keep
    //function: public: int __thiscall CKBehavior::IsInputActive(int)
	GetAddress(m_CK2Module, "?IsInputActive@CKBehavior@@QAEHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020()
{
    //keep
    //function: public: class CKObject * __thiscall CKBehavior::GetInputParameterObject(int)
	GetAddress(m_CK2Module, "?GetInputParameterObject@CKBehavior@@QAEPAVCKObject@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021()
{
    //redirect
    //need: public: void __thiscall CKObjectDeclaration::SetCompatibleClassId(long)
    //point to: public: void __thiscall CKObjectDeclaration::SetCompatibleClassId(unsigned int)
    //          
	GetAddress(m_CK2Module, "?SetCompatibleClassId@CKObjectDeclaration@@QAEXJ@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022()
{
    //keep
    //function: public: virtual __thiscall CKBaseManager::~CKBaseManager(void)
	GetAddress(m_CK2Module, "??1CKBaseManager@@UAE@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023()
{
    //redirect
    //need: public: long __thiscall CKContext::RegisterNewManager(class CKBaseManager *)
    //point to: public: int __thiscall CKContext::RegisterNewManager(class CKBaseManager *)
    //          
	GetAddress(m_CK2Module, "?RegisterNewManager@CKContext@@QAEJPAVCKBaseManager@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024()
{
    //keep
    //function: public: __thiscall CKBaseManager::CKBaseManager(class CKContext *,struct CKGUID,char *)
	GetAddress(m_CK2Module, "??0CKBaseManager@@QAE@PAVCKContext@@UCKGUID@@PAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025()
{
    //keep
    //function: public: int __thiscall CKDataArray::SetElementValue(int,int,void *,int)
	GetAddress(m_CK2Module, "?SetElementValue@CKDataArray@@QAEHHHPAXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026()
{
    //keep
    //function: public: enum CK_ARRAYTYPE __thiscall CKDataArray::GetColumnType(int)
	GetAddress(m_CK2Module, "?GetColumnType@CKDataArray@@QAE?AW4CK_ARRAYTYPE@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027()
{
    //redirect
    //need: public: class XSArray<unsigned long> * __thiscall CKDataArray::InsertRow(int)
    //point to: public: class XSArray<unsigned int> * __thiscall CKDataArray::InsertRow(int)
    //          
	GetAddress(m_CK2Module, "?InsertRow@CKDataArray@@QAEPAV?$XSArray@K@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028()
{
    //keep
    //function: public: void __thiscall CKDataArray::SetKeyColumn(int)
	GetAddress(m_CK2Module, "?SetKeyColumn@CKDataArray@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029()
{
    //keep
    //function: public: void __thiscall CKDataArray::InsertColumn(int,enum CK_ARRAYTYPE,char *,struct CKGUID)
	GetAddress(m_CK2Module, "?InsertColumn@CKDataArray@@QAEXHW4CK_ARRAYTYPE@@PADUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030()
{
    //keep
    //function: public: void __thiscall CKScene::AddObjectToScene(class CKSceneObject *,int)
	GetAddress(m_CK2Module, "?AddObjectToScene@CKScene@@QAEXPAVCKSceneObject@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031()
{
    //keep
    //function: public: class CKScene * __thiscall CKContext::GetCurrentScene(void)
	GetAddress(m_CK2Module, "?GetCurrentScene@CKContext@@QAEPAVCKScene@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032()
{
    //redirect
    //need: public: class CKObject * __thiscall CKContext::CreateObject(long,char *,enum CK_OBJECTCREATION_OPTIONS,enum CK_LOADMODE *)
    //point to: public: class CKObject * __thiscall CKContext::CreateObject(unsigned int,char *,enum CK_OBJECTCREATION_OPTIONS,enum CK_LOADMODE *)
    //          
	GetAddress(m_CK2Module, "?CreateObject@CKContext@@QAEPAVCKObject@@JPADW4CK_OBJECTCREATION_OPTIONS@@PAW4CK_LOADMODE@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033()
{
    //keep
    //function: public: void __thiscall CKDataArray::RemoveColumn(int)
	GetAddress(m_CK2Module, "?RemoveColumn@CKDataArray@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034()
{
    //keep
    //function: public: int __thiscall CKDataArray::GetColumnCount(void)
	GetAddress(m_CK2Module, "?GetColumnCount@CKDataArray@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035()
{
    //keep
    //function: public: void __thiscall CKDataArray::Clear(int)
	GetAddress(m_CK2Module, "?Clear@CKDataArray@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036()
{
    //redirect
    //need: public: class CKObject * __thiscall CKContext::GetObjectByNameAndClass(char *,long,class CKObject *)
    //point to: public: class CKObject * __thiscall CKContext::GetObjectByNameAndClass(char *,unsigned int,class CKObject *)
    //          
	GetAddress(m_CK2Module, "?GetObjectByNameAndClass@CKContext@@QAEPAVCKObject@@PADJPAV2@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037()
{
    //keep
    //function: public: int __thiscall CKDataArray::GetKeyColumn(void)
	GetAddress(m_CK2Module, "?GetKeyColumn@CKDataArray@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038()
{
    //keep
    //function: public: int __thiscall CKDataArray::GetElementValue(int,int,void *)
	GetAddress(m_CK2Module, "?GetElementValue@CKDataArray@@QAEHHHPAX@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039()
{
    //keep
    //function: public: int __thiscall CKDataArray::GetRowCount(void)
	GetAddress(m_CK2Module, "?GetRowCount@CKDataArray@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040()
{
    //keep
    //function: public: char * __thiscall CKDataArray::GetColumnName(int)
	GetAddress(m_CK2Module, "?GetColumnName@CKDataArray@@QAEPADH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041()
{
    //redirect
    //need: public: long __thiscall CKBehavior::SetLocalParameterObject(int,class CKObject *)
    //point to: public: int __thiscall CKBehavior::SetLocalParameterObject(int,class CKObject *)
    //          
	GetAddress(m_CK2Module, "?SetLocalParameterObject@CKBehavior@@QAEJHPAVCKObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042()
{
    //redirect
    //need: public: void __thiscall CKBehaviorPrototype::SetBehaviorCallbackFct(long (__cdecl*)(struct CKBehaviorContext const &),unsigned long,void *)
    //point to: public: void __thiscall CKBehaviorPrototype::SetBehaviorCallbackFct(int (__cdecl*)(struct CKBehaviorContext const &),unsigned int,void *)
    //          
	GetAddress(m_CK2Module, "?SetBehaviorCallbackFct@CKBehaviorPrototype@@QAEXP6AJABUCKBehaviorContext@@@ZKPAX@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043()
{
    //keep
    //function: public: void __thiscall CKBehaviorPrototype::SetBehaviorFlags(enum CK_BEHAVIOR_FLAGS)
	GetAddress(m_CK2Module, "?SetBehaviorFlags@CKBehaviorPrototype@@QAEXW4CK_BEHAVIOR_FLAGS@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044()
{
    //keep
    //function: public: int __thiscall CKBehaviorPrototype::DeclareSetting(char *,struct CKGUID,char *)
	GetAddress(m_CK2Module, "?DeclareSetting@CKBehaviorPrototype@@QAEHPADUCKGUID@@0@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045()
{
    //keep
    //function: public: int __thiscall CKBehaviorPrototype::DeclareLocalParameter(char *,struct CKGUID,char *)
	GetAddress(m_CK2Module, "?DeclareLocalParameter@CKBehaviorPrototype@@QAEHPADUCKGUID@@0@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046()
{
    //redirect
    //need: public: long __thiscall CKContext::OutputToConsole(char *,int)
    //point to: public: int __thiscall CKContext::OutputToConsole(char *,int)
    //          
	GetAddress(m_CK2Module, "?OutputToConsole@CKContext@@QAEJPADH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047()
{
    //redirect
    //need: public: long __thiscall CKBehavior::GetLocalParameterValue(int,void *)
    //point to: public: int __thiscall CKBehavior::GetLocalParameterValue(int,void *)
    //          
	GetAddress(m_CK2Module, "?GetLocalParameterValue@CKBehavior@@QAEJHPAX@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048()
{
    //redirect
    //need: public: long __thiscall CKBehavior::SetLocalParameterValue(int,void const *,int)
    //point to: public: int __thiscall CKBehavior::SetLocalParameterValue(int,void const *,int)
    //          
	GetAddress(m_CK2Module, "?SetLocalParameterValue@CKBehavior@@QAEJHPBXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049()
{
    //keep
    //function: void __cdecl CKDestroyObject(class CKObject *,unsigned long,class CKDependencies *)
	GetAddress(m_CK2Module, "?CKDestroyObject@@YAXPAVCKObject@@KPAVCKDependencies@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050()
{
    //keep
    //function: public: class CKParameterIn * __thiscall CKBehavior::RemoveInputParameter(int)
	GetAddress(m_CK2Module, "?RemoveInputParameter@CKBehavior@@QAEPAVCKParameterIn@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051()
{
    //keep
    //function: public: class CKParameterIn * __thiscall CKBehavior::CreateInputParameter(char *,struct CKGUID)
	GetAddress(m_CK2Module, "?CreateInputParameter@CKBehavior@@QAEPAVCKParameterIn@@PADUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetInputParameterCount(void)
	GetAddress(m_CK2Module, "?GetInputParameterCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053()
{
    //keep
    //function: public: void __thiscall CKBehavior::Activate(int,int)
	GetAddress(m_CK2Module, "?Activate@CKBehavior@@QAEXHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054()
{
    //redirect
    //need: public: long __cdecl CKContext::OutputToConsoleEx(char *,...)
    //point to: public: int __cdecl CKContext::OutputToConsoleEx(char *,...)
    //          
	GetAddress(m_CK2Module, "?OutputToConsoleEx@CKContext@@QAAJPADZZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055()
{
    //keep
    //function: public: class CKBehavior * __thiscall CKBeObject::GetScript(int)
	GetAddress(m_CK2Module, "?GetScript@CKBeObject@@QAEPAVCKBehavior@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056()
{
    //keep
    //function: public: void __thiscall CKScene::DeActivate(class CKSceneObject *)
	GetAddress(m_CK2Module, "?DeActivate@CKScene@@QAEXPAVCKSceneObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057()
{
    //keep
    //function: public: class CKBeObject * __thiscall CKBehavior::GetTarget(void)
	GetAddress(m_CK2Module, "?GetTarget@CKBehavior@@QAEPAVCKBeObject@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058()
{
    //keep
    //function: public: void __thiscall CKScene::Activate(class CKSceneObject *,int)
	GetAddress(m_CK2Module, "?Activate@CKScene@@QAEXPAVCKSceneObject@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059()
{
    //keep
    //function: public: class CKObject * __thiscall CKBehavior::GetLocalParameterObject(int)
	GetAddress(m_CK2Module, "?GetLocalParameterObject@CKBehavior@@QAEPAVCKObject@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060()
{
    //redirect
    //need: public: long __thiscall CKBehavior::SetOutputParameterValue(int,void const *,int)
    //point to: public: int __thiscall CKBehavior::SetOutputParameterValue(int,void const *,int)
    //          
	GetAddress(m_CK2Module, "?SetOutputParameterValue@CKBehavior@@QAEJHPBXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061()
{
    //keep
    //function: public: class CKBeObject * __thiscall CKGroup::GetObjectA(int)
	GetAddress(m_CK2Module, "?GetObjectA@CKGroup@@QAEPAVCKBeObject@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062()
{
    //keep
    //function: public: float __thiscall CKWaveSound::GetPan(void)
	GetAddress(m_CK2Module, "?GetPan@CKWaveSound@@QAEMXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063()
{
    //keep
    //function: public: float __thiscall CKWaveSound::GetPitch(void)
	GetAddress(m_CK2Module, "?GetPitch@CKWaveSound@@QAEMXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064()
{
    //keep
    //function: public: float __thiscall CKWaveSound::GetGain(void)
	GetAddress(m_CK2Module, "?GetGain@CKWaveSound@@QAEMXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065()
{
    //keep
    //function: public: void __thiscall CKWaveSound::SetGain(float)
	GetAddress(m_CK2Module, "?SetGain@CKWaveSound@@QAEXM@Z");
	__asm JMP EAX;
}



HANDEXPORT void __stdcall func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066(void* thisClass)
{
    //TODO: hand process
    //need: public: __thiscall CKMemoryPool::~CKMemoryPool(void)
    //point to: 
    //          
	//GetAddress(m_VxMathModule, "??1CKMemoryPool@@QAE@XZ");
	VxScratch* data = (VxScratch*)thisClass;
	if (data->m_Memory)
		free(data->m_Memory);
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067()
{
    //redirect
    //need: public: class CKObject * __thiscall CKContext::GetObjectA(unsigned long)
    //point to: public: class CKObject * __thiscall CKContext::GetObjectA(unsigned int)
    //          
	GetAddress(m_CK2Module, "?GetObjectA@CKContext@@QAEPAVCKObject@@K@Z");
	__asm JMP EAX;
}



HANDEXPORT void __stdcall func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068(void* thisClass, void* CKClass, int len)
{
    //TODO: hand process
    //need: public: __thiscall CKMemoryPool::CKMemoryPool(class CKContext *,int)
    //point to: 
    //          
	//GetAddress(m_CK2Module, "??0CKMemoryPool@@QAE@PAVCKContext@@H@Z");
	VxScratch* data = (VxScratch*)thisClass;
	data->m_Memory = malloc(len);
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000069()
{
    //keep
    //function: public: void * __thiscall CKBehavior::GetLocalParameterWriteDataPtr(int)
	GetAddress(m_CK2Module, "?GetLocalParameterWriteDataPtr@CKBehavior@@QAEPAXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070()
{
    //keep
    //function: public: class XObjectPointerArray const & __thiscall CKAttributeManager::GetGlobalAttributeListPtr(int)
	GetAddress(m_CK2Module, "?GetGlobalAttributeListPtr@CKAttributeManager@@QAEABVXObjectPointerArray@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071()
{
    //keep
    //function: public: class CKAttributeManager * __thiscall CKContext::GetAttributeManager(void)
	GetAddress(m_CK2Module, "?GetAttributeManager@CKContext@@QAEPAVCKAttributeManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000072()
{
    //redirect
    //need: public: long __thiscall CKContext::DestroyObject(class CKObject *,unsigned long,class CKDependencies *)
    //point to: public: int __thiscall CKContext::DestroyObject(class CKObject *,unsigned long,class CKDependencies *)
    //          
	GetAddress(m_CK2Module, "?DestroyObject@CKContext@@QAEJPAVCKObject@@KPAVCKDependencies@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000073()
{
    //keep
    //function: public: void __thiscall CKObjectDeclaration::NeedManager(struct CKGUID)
	GetAddress(m_CK2Module, "?NeedManager@CKObjectDeclaration@@QAEXUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074()
{
    //redirect
    //need: int __cdecl CKIsChildClassOf(class CKObject *,long)
    //point to: int __cdecl CKIsChildClassOf(class CKObject *,unsigned int)
    //          
	GetAddress(m_CK2Module, "?CKIsChildClassOf@@YAHPAVCKObject@@J@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075()
{
    //keep
    //function: public: void * __thiscall CKBehavior::GetLocalParameterReadDataPtr(int)
	GetAddress(m_CK2Module, "?GetLocalParameterReadDataPtr@CKBehavior@@QAEPAXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076()
{
    //redirect
    //need: public: long __thiscall CKLevel::AddObject(class CKObject *)
    //point to: public: int __thiscall CKLevel::AddObject(class CKObject *)
    //          
	GetAddress(m_CK2Module, "?AddObject@CKLevel@@QAEJPAVCKObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077()
{
    //keep
    //function: public: class CKParameterOut * __thiscall CKBehavior::RemoveOutputParameter(int)
	GetAddress(m_CK2Module, "?RemoveOutputParameter@CKBehavior@@QAEPAVCKParameterOut@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078()
{
    //keep
    //function: public: class CKParameterOut * __thiscall CKBehavior::CreateOutputParameter(char *,struct CKGUID)
	GetAddress(m_CK2Module, "?CreateOutputParameter@CKBehavior@@QAEPAVCKParameterOut@@PADUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079()
{
    //keep
    //function: public: class CKRenderManager * __thiscall CKContext::GetRenderManager(void)
	GetAddress(m_CK2Module, "?GetRenderManager@CKContext@@QAEPAVCKRenderManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080()
{
    //keep
    //function: public: int __thiscall CKDataArray::SetElementStringValue(int,int,char *)
	GetAddress(m_CK2Module, "?SetElementStringValue@CKDataArray@@QAEHHHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081()
{
    //keep
    //function: public: int __thiscall CKContext::IsInInterfaceMode(void)
	GetAddress(m_CK2Module, "?IsInInterfaceMode@CKContext@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082()
{
    //redirect
    //need: public: unsigned long * __thiscall CKDataArray::GetElement(int,int)
    //point to: public: unsigned int * __thiscall CKDataArray::GetElement(int,int)
    //          
	GetAddress(m_CK2Module, "?GetElement@CKDataArray@@QAEPAKHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000083()
{
    //keep
    //function: public: struct CKGUID __thiscall CKParameter::GetGUID(void)
	GetAddress(m_CK2Module, "?GetGUID@CKParameter@@QAE?AUCKGUID@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084()
{
    //keep
    //function: public: class CKParameterOut * __thiscall CKBehavior::GetOutputParameter(int)
	GetAddress(m_CK2Module, "?GetOutputParameter@CKBehavior@@QAEPAVCKParameterOut@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085()
{
    //keep
    //function: public: void __thiscall CKBehavior::EnableOutputParameter(int,int)
	GetAddress(m_CK2Module, "?EnableOutputParameter@CKBehavior@@QAEXHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086()
{
    //keep
    //function: public: void __thiscall CKBehavior::EnableInputParameter(int,int)
	GetAddress(m_CK2Module, "?EnableInputParameter@CKBehavior@@QAEXHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000087()
{
    //keep
    //function: public: int __thiscall CKDataArray::GetElementStringValue(int,int,char *)
	GetAddress(m_CK2Module, "?GetElementStringValue@CKDataArray@@QAEHHHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088()
{
    //keep
    //function: public: class CKParameterIn * __thiscall CKBehavior::GetInputParameter(int)
	GetAddress(m_CK2Module, "?GetInputParameter@CKBehavior@@QAEPAVCKParameterIn@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089()
{
    //keep
    //function: public: void __thiscall CKParameterIn::SetGUID(struct CKGUID,int,char *)
	GetAddress(m_CK2Module, "?SetGUID@CKParameterIn@@QAEXUCKGUID@@HPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090()
{
    //redirect
    //need: public: unsigned long * __thiscall CKContext::GetObjectsListByClassID(long)
    //point to: public: unsigned int * __thiscall CKContext::GetObjectsListByClassID(unsigned int)
    //          
	GetAddress(m_CK2Module, "?GetObjectsListByClassID@CKContext@@QAEPAKJ@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091()
{
    //keep
    //function: public: int __thiscall CKGroup::GetObjectCount(void)
	GetAddress(m_CK2Module, "?GetObjectCount@CKGroup@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092()
{
    //redirect
    //need: public: long __thiscall CKBehavior::DeleteOutput(int)
    //point to: public: int __thiscall CKBehavior::DeleteOutput(int)
    //          
	GetAddress(m_CK2Module, "?DeleteOutput@CKBehavior@@QAEJH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000093()
{
    //redirect
    //need: public: long __thiscall CKBehavior::DeleteInput(int)
    //point to: public: int __thiscall CKBehavior::DeleteInput(int)
    //          
	GetAddress(m_CK2Module, "?DeleteInput@CKBehavior@@QAEJH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094()
{
    //keep
    //function: public: class CKBehaviorIO * __thiscall CKBehavior::CreateOutput(char *)
	GetAddress(m_CK2Module, "?CreateOutput@CKBehavior@@QAEPAVCKBehaviorIO@@PAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095()
{
    //keep
    //function: public: class CKBehaviorIO * __thiscall CKBehavior::CreateInput(char *)
	GetAddress(m_CK2Module, "?CreateInput@CKBehavior@@QAEPAVCKBehaviorIO@@PAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetInputCount(void)
	GetAddress(m_CK2Module, "?GetInputCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097()
{
    //keep
    //function: public: class CKBeObject * __thiscall CKBehavior::GetOwner(void)
	GetAddress(m_CK2Module, "?GetOwner@CKBehavior@@QAEPAVCKBeObject@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098()
{
    //keep
    //function: public: class CKParameterLocal * __thiscall CKBehavior::GetLocalParameter(int)
	GetAddress(m_CK2Module, "?GetLocalParameter@CKBehavior@@QAEPAVCKParameterLocal@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099()
{
    //keep
    //function: public: struct CKGUID __thiscall CKBehavior::GetPrototypeGuid(void)
	GetAddress(m_CK2Module, "?GetPrototypeGuid@CKBehavior@@QAE?AUCKGUID@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100()
{
    //redirect
    //need: public: long __thiscall CKBehavior::SetOutputParameterObject(int,class CKObject *)
    //point to: public: int __thiscall CKBehavior::SetOutputParameterObject(int,class CKObject *)
    //          
	GetAddress(m_CK2Module, "?SetOutputParameterObject@CKBehavior@@QAEJHPAVCKObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101()
{
    //keep
    //function: public: int __thiscall CKBehavior::IsParentScriptActiveInScene(class CKScene *)
	GetAddress(m_CK2Module, "?IsParentScriptActiveInScene@CKBehavior@@QAEHPAVCKScene@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102()
{
    //keep
    //function: public: int __thiscall CKContext::IsPlaying(void)
	GetAddress(m_CK2Module, "?IsPlaying@CKContext@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103()
{
    //keep
    //function: public: int __thiscall CKBeObject::RemoveAttribute(int)
	GetAddress(m_CK2Module, "?RemoveAttribute@CKBeObject@@QAEHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104()
{
    //keep
    //function: public: int __thiscall CKContext::IsInLoad(void)
	GetAddress(m_CK2Module, "?IsInLoad@CKContext@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105()
{
    //keep
    //function: public: class XObjectPointerArray const & __thiscall CKAttributeManager::GetAttributeListPtr(int)
	GetAddress(m_CK2Module, "?GetAttributeListPtr@CKAttributeManager@@QAEABVXObjectPointerArray@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106()
{
    //keep
    //function: public: enum CK_BEHAVIOR_TYPE __thiscall CKBehavior::GetType(void)
	GetAddress(m_CK2Module, "?GetType@CKBehavior@@QAE?AW4CK_BEHAVIOR_TYPE@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000107()
{
    //redirect
    //need: public: int __thiscall CKContext::GetObjectsCountByClassID(long)
    //point to: public: int __thiscall CKContext::GetObjectsCountByClassID(unsigned int)
    //          
	GetAddress(m_CK2Module, "?GetObjectsCountByClassID@CKContext@@QAEHJ@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108()
{
    //keep
    //function: public: void __thiscall CKAttributeManager::SetAttributeCallbackFunction(int,void (__cdecl*)(int,int,class CKBeObject *,void *),void *)
	GetAddress(m_CK2Module, "?SetAttributeCallbackFunction@CKAttributeManager@@QAEXHP6AXHHPAVCKBeObject@@PAX@Z1@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000109()
{
    //keep
    //function: public: void __thiscall CKAttributeManager::SetAttributeDefaultValue(int,char *)
	GetAddress(m_CK2Module, "?SetAttributeDefaultValue@CKAttributeManager@@QAEXHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110()
{
    //keep
    //function: public: void __thiscall CKAttributeManager::SetAttributeCategory(int,char *)
	GetAddress(m_CK2Module, "?SetAttributeCategory@CKAttributeManager@@QAEXHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111()
{
    //redirect
    //need: public: int __thiscall CKAttributeManager::RegisterNewAttributeType(char *,struct CKGUID,long,enum CK_ATTRIBUT_FLAGS)
    //point to: public: int __thiscall CKAttributeManager::RegisterNewAttributeType(char *,struct CKGUID,unsigned int,enum CK_ATTRIBUT_FLAGS)
    //          
	GetAddress(m_CK2Module, "?RegisterNewAttributeType@CKAttributeManager@@QAEHPADUCKGUID@@JW4CK_ATTRIBUT_FLAGS@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000112()
{
    //redirect
    //need: public: int __thiscall CKAttributeManager::AddCategory(char *,unsigned long)
    //point to: public: int __thiscall CKAttributeManager::AddCategory(char *,unsigned int)
    //          
	GetAddress(m_CK2Module, "?AddCategory@CKAttributeManager@@QAEHPADK@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000113()
{
    //redirect
    //need: public: long __thiscall CKContext::DestroyObject(unsigned long,unsigned long,class CKDependencies *)
    //point to: public: int __thiscall CKContext::DestroyObject(unsigned int,unsigned long,class CKDependencies *)
    //          
	GetAddress(m_CK2Module, "?DestroyObject@CKContext@@QAEJKKPAVCKDependencies@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000114()
{
    //keep
    //function: public: class CKMessage * __thiscall CKMessageManager::SendMessageSingle(int,class CKBeObject *,class CKBeObject *)
	GetAddress(m_CK2Module, "?SendMessageSingle@CKMessageManager@@QAEPAVCKMessage@@HPAVCKBeObject@@0@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115()
{
    //keep
    //function: public: class CKMessageManager * __thiscall CKContext::GetMessageManager(void)
	GetAddress(m_CK2Module, "?GetMessageManager@CKContext@@QAEPAVCKMessageManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000116()
{
    //keep
    //function: public: class CKParameterOut * __thiscall CKBeObject::GetAttributeParameter(int)
	GetAddress(m_CK2Module, "?GetAttributeParameter@CKBeObject@@QAEPAVCKParameterOut@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000117()
{
    //redirect
    //need: public: unsigned long __thiscall CKBitmapData::GetPixel(int,int,int)
    //point to: public: unsigned int __thiscall CKBitmapData::GetPixel(int,int,int)
    //          
	GetAddress(m_CK2Module, "?GetPixel@CKBitmapData@@QAEKHHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000118()
{
    //keep
    //function: public: struct CKParameterTypeDesc * __thiscall CKParameterManager::GetParameterTypeDescription(struct CKGUID)
	GetAddress(m_CK2Module, "?GetParameterTypeDescription@CKParameterManager@@QAEPAUCKParameterTypeDesc@@UCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000119()
{
    //redirect
    //need: public: long __cdecl CKParameterManager::RegisterNewStructure(struct CKGUID,char *,char *,...)
    //point to: public: int __cdecl CKParameterManager::RegisterNewStructure(struct CKGUID,char *,char *,...)
    //          
	GetAddress(m_CK2Module, "?RegisterNewStructure@CKParameterManager@@QAAJUCKGUID@@PAD1ZZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120()
{
    //redirect
    //need: public: long __thiscall CKParameterManager::RegisterNewFlags(struct CKGUID,char *,char *)
    //point to: public: int __thiscall CKParameterManager::RegisterNewFlags(struct CKGUID,char *,char *)
    //          
	GetAddress(m_CK2Module, "?RegisterNewFlags@CKParameterManager@@QAEJUCKGUID@@PAD1@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000121()
{
    //redirect
    //need: public: long __thiscall CKParameterManager::RegisterNewEnum(struct CKGUID,char *,char *)
    //point to: public: int __thiscall CKParameterManager::RegisterNewEnum(struct CKGUID,char *,char *)
    //          
	GetAddress(m_CK2Module, "?RegisterNewEnum@CKParameterManager@@QAEJUCKGUID@@PAD1@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000122()
{
    //keep
    //function: public: class CKParameterManager * __thiscall CKContext::GetParameterManager(void)
	GetAddress(m_CK2Module, "?GetParameterManager@CKContext@@QAEPAVCKParameterManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123()
{
    //redirect
    //need: public: long __thiscall CKParameterManager::UnRegisterParameterType(struct CKGUID)
    //point to: public: int __thiscall CKParameterManager::UnRegisterParameterType(struct CKGUID)
    //          
	GetAddress(m_CK2Module, "?UnRegisterParameterType@CKParameterManager@@QAEJUCKGUID@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124()
{
    //keep
    //function: public: void __thiscall CKWaveSound::SetPitch(float)
	GetAddress(m_CK2Module, "?SetPitch@CKWaveSound@@QAEXM@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000125()
{
    //keep
    //function: public: class CKTimeManager * __thiscall CKContext::GetTimeManager(void)
	GetAddress(m_CK2Module, "?GetTimeManager@CKContext@@QAEPAVCKTimeManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126()
{
    //keep
    //function: public: void __thiscall CKObject::SetName(char *,int)
	GetAddress(m_CK2Module, "?SetName@CKObject@@QAEXPADH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000127()
{
    //redirect
    //need: public: long __thiscall CKBehavior::GetOutputParameterValue(int,void *)
    //point to: public: int __thiscall CKBehavior::GetOutputParameterValue(int,void *)
    //          
	GetAddress(m_CK2Module, "?GetOutputParameterValue@CKBehavior@@QAEJHPAX@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000128()
{
    //keep
    //function: public: class CKObject * __thiscall CKContext::GetObjectByName(char *,class CKObject *)
	GetAddress(m_CK2Module, "?GetObjectByName@CKContext@@QAEPAVCKObject@@PADPAV2@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000129()
{
    //keep
    //function: public: struct CKGUID __thiscall CKDataArray::GetColumnParameterGuid(int)
	GetAddress(m_CK2Module, "?GetColumnParameterGuid@CKDataArray@@QAE?AUCKGUID@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000130()
{
    //keep
    //function: public: int __thiscall CKBehavior::IsActive(void)
	GetAddress(m_CK2Module, "?IsActive@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000131()
{
    //keep
    //function: public: int __thiscall CKAttributeManager::GetAttributeTypeByName(char *)
	GetAddress(m_CK2Module, "?GetAttributeTypeByName@CKAttributeManager@@QAEHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000132()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetOutputCount(void)
	GetAddress(m_CK2Module, "?GetOutputCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000133()
{
    //keep
    //function: public: class CKBehaviorIO * __thiscall CKBehavior::RemoveOutput(int)
	GetAddress(m_CK2Module, "?RemoveOutput@CKBehavior@@QAEPAVCKBehaviorIO@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134()
{
    //keep
    //function: char * __cdecl CKStrdup(char *)
	GetAddress(m_CK2Module, "?CKStrdup@@YAPADPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000135()
{
    //redirect
    //need: public: int __thiscall CKDataArray::FindRowIndex(int,enum CK_COMPOPERATOR,unsigned long,int,int)
    //point to: public: int __thiscall CKDataArray::FindRowIndex(int,enum CK_COMPOPERATOR,unsigned int,int,int)
    //          
	GetAddress(m_CK2Module, "?FindRowIndex@CKDataArray@@QAEHHW4CK_COMPOPERATOR@@KHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000136()
{
    //keep
    //function: public: int __thiscall CKParameter::GetDataSize(void)
	GetAddress(m_CK2Module, "?GetDataSize@CKParameter@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137()
{
    //keep
    //function: public: class CKSceneObjectIterator __thiscall CKScene::GetObjectIterator(void)
	GetAddress(m_CK2Module, "?GetObjectIterator@CKScene@@QAE?AVCKSceneObjectIterator@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000138()
{
    //redirect
    //need: public: int __thiscall CKBitmapData::SetPixel(int,int,unsigned long,int)
    //point to: public: int __thiscall CKBitmapData::SetPixel(int,int,unsigned int,int)
    //          
	GetAddress(m_CK2Module, "?SetPixel@CKBitmapData@@QAEHHHKH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000139()
{
    //keep
    //function: public: unsigned char * __thiscall CKBitmapData::LockSurfacePtr(int)
	GetAddress(m_CK2Module, "?LockSurfacePtr@CKBitmapData@@QAEPAEH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140()
{
    //keep
    //function: public: void __thiscall CKDataArray::RemoveRow(int)
	GetAddress(m_CK2Module, "?RemoveRow@CKDataArray@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000141()
{
    //keep
    //function: public: char * __thiscall CKBitmapData::GetSlotFileName(int)
	GetAddress(m_CK2Module, "?GetSlotFileName@CKBitmapData@@QAEPADH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000142()
{
    //keep
    //function: public: int __thiscall CKBitmapData::GetSlotCount(void)
	GetAddress(m_CK2Module, "?GetSlotCount@CKBitmapData@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000143()
{
    //keep
    //function: public: int __thiscall CKBitmapData::SaveImage(char *,int,int)
	GetAddress(m_CK2Module, "?SaveImage@CKBitmapData@@QAEHPADHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144()
{
    //keep
    //function: public: int __thiscall CKBitmapData::ReleaseSurfacePtr(int)
	GetAddress(m_CK2Module, "?ReleaseSurfacePtr@CKBitmapData@@QAEHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000145()
{
    //keep
    //function: public: int __thiscall CKScene::IsObjectActive(class CKSceneObject *)
	GetAddress(m_CK2Module, "?IsObjectActive@CKScene@@QAEHPAVCKSceneObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000146()
{
    //keep
    //function: public: int __thiscall CKBehavior::AddOutput(char *)
	GetAddress(m_CK2Module, "?AddOutput@CKBehavior@@QAEHPAD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147()
{
    //keep
    //function: public: class CKBehaviorIO * __thiscall CKBehavior::GetOutput(int)
	GetAddress(m_CK2Module, "?GetOutput@CKBehavior@@QAEPAVCKBehaviorIO@@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000148()
{
    //keep
    //function: public: int __thiscall CKBeObject::GetScriptCount(void)
	GetAddress(m_CK2Module, "?GetScriptCount@CKBeObject@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000149()
{
    //redirect
    //need: long __cdecl CKReadObjectState(class CKObject *,class CKStateChunk *)
    //point to: int __cdecl CKReadObjectState(class CKObject *,class CKStateChunk *)
    //          
	GetAddress(m_CK2Module, "?CKReadObjectState@@YAJPAVCKObject@@PAVCKStateChunk@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000150()
{
    //keep
    //function: public: class CKStateChunk * __thiscall CKScene::GetObjectInitialValue(class CKSceneObject *)
	GetAddress(m_CK2Module, "?GetObjectInitialValue@CKScene@@QAEPAVCKStateChunk@@PAVCKSceneObject@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151()
{
    //keep
    //function: public: int __thiscall CKSceneObject::IsInScene(class CKScene *)
	GetAddress(m_CK2Module, "?IsInScene@CKSceneObject@@QAEHPAVCKScene@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000152()
{
    //keep
    //function: public: int __thiscall CKScene::SetObjectInitialValue(class CKSceneObject *,class CKStateChunk *)
	GetAddress(m_CK2Module, "?SetObjectInitialValue@CKScene@@QAEHPAVCKSceneObject@@PAVCKStateChunk@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000153()
{
    //redirect
    //need: class CKStateChunk * __cdecl CKSaveObjectState(class CKObject *,unsigned long)
    //point to: class CKStateChunk * __cdecl CKSaveObjectState(class CKObject *,unsigned int)
    //          
	GetAddress(m_CK2Module, "?CKSaveObjectState@@YAPAVCKStateChunk@@PAVCKObject@@K@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000154()
{
    //redirect
    //need: public: long __thiscall CKParameterIn::SetDirectSource(class CKParameter *)
    //point to: public: int __thiscall CKParameterIn::SetDirectSource(class CKParameter *)
    //          
	GetAddress(m_CK2Module, "?SetDirectSource@CKParameterIn@@QAEJPAVCKParameter@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155()
{
    //keep
    //function: public: int __thiscall CKParameter::IsCompatibleWith(class CKParameter *)
	GetAddress(m_CK2Module, "?IsCompatibleWith@CKParameter@@QAEHPAV1@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000156()
{
    //keep
    //function: public: class CKBehavior * __thiscall CKBehavior::GetSubBehavior(int)
	GetAddress(m_CK2Module, "?GetSubBehavior@CKBehavior@@QAEPAV1@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000157()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetSubBehaviorCount(void)
	GetAddress(m_CK2Module, "?GetSubBehaviorCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000158()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetLocalParameterCount(void)
	GetAddress(m_CK2Module, "?GetLocalParameterCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000159()
{
    //keep
    //function: public: int __thiscall CKBehavior::GetOutputParameterCount(void)
	GetAddress(m_CK2Module, "?GetOutputParameterCount@CKBehavior@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160()
{
    //redirect
    //need: public: long __thiscall CKPathManager::RenamePath(int,int,class XString &)
    //point to: public: int __thiscall CKPathManager::RenamePath(int,int,class XString &)
    //          
	GetAddress(m_CK2Module, "?RenamePath@CKPathManager@@QAEJHHAAVXString@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000161()
{
    //redirect
    //need: public: long __thiscall CKPathManager::GetPathName(int,int,class XString &)
    //point to: public: int __thiscall CKPathManager::GetPathName(int,int,class XString &)
    //          
	GetAddress(m_CK2Module, "?GetPathName@CKPathManager@@QAEJHHAAVXString@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000162()
{
    //keep
    //function: public: int __thiscall CKPathManager::GetPathCount(int)
	GetAddress(m_CK2Module, "?GetPathCount@CKPathManager@@QAEHH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000163()
{
    //keep
    //function: public: class CKPathManager * __thiscall CKContext::GetPathManager(void)
	GetAddress(m_CK2Module, "?GetPathManager@CKContext@@QAEPAVCKPathManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164()
{
    //keep
    //function: public: class CKRenderContext * __thiscall CKContext::GetPlayerRenderContext(void)
	GetAddress(m_CK2Module, "?GetPlayerRenderContext@CKContext@@QAEPAVCKRenderContext@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000165()
{
    //keep
    //function: public: void __thiscall CKWaveSound::Stop(float)
	GetAddress(m_CK2Module, "?Stop@CKWaveSound@@QAEXM@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000166()
{
    //keep
    //function: public: int __thiscall CKWaveSound::IsPlaying(void)
	GetAddress(m_CK2Module, "?IsPlaying@CKWaveSound@@QAEHXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000167()
{
    //keep
    //function: public: void __thiscall CKWaveSound::Play(float,float)
	GetAddress(m_CK2Module, "?Play@CKWaveSound@@QAEXMM@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000168()
{
    //keep
    //function: public: void __thiscall CKWaveSound::SetLoopMode(int)
	GetAddress(m_CK2Module, "?SetLoopMode@CKWaveSound@@QAEXH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000169()
{
    //keep
    //function: public: class CKBehavior * __thiscall CKBehavior::GetParent(void)
	GetAddress(m_CK2Module, "?GetParent@CKBehavior@@QAEPAV1@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000170()
{
    //keep
    //function: public: class CKBehavior * __thiscall CKBehavior::GetOwnerScript(void)
	GetAddress(m_CK2Module, "?GetOwnerScript@CKBehavior@@QAEPAV1@XZ");
	__asm JMP EAX;
}



HANDEXPORT char* __stdcall func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000171(void* thisClass, int sz)
{
    //TODO: hand process
    //need: public: char * __thiscall CKContext::GetStringBuffer(int)
    //point to: 
    //          
	//GetAddress(m_CK2Module, "?GetStringBuffer@CKContext@@QAEPADH@Z");
	static void* buf = NULL;
	static int bsz = -1;

	if (bsz == -1) {
		bsz = sz;
		buf = malloc(bsz);
		assert(buf != NULL);
	} else {
		if (bsz < sz) {
			if (buf != NULL) {
				free(buf);
				bsz = sz;
				buf = malloc(bsz);
			}
		}
	}

	return (char*)buf;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172()
{
    //keep
    //function: public: void __thiscall CKBehavior::SetFunction(int (__cdecl*)(struct CKBehaviorContext const &))
	GetAddress(m_CK2Module, "?SetFunction@CKBehavior@@QAEXP6AHABUCKBehaviorContext@@@Z@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000173()
{
    //redirect
    //need: public: unsigned long __thiscall CKBehavior::GetVersion(void)
    //point to: public: unsigned int __thiscall CKBehavior::GetVersion(void)
    //          
	GetAddress(m_CK2Module, "?GetVersion@CKBehavior@@QAEKXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174()
{
    //keep
    //function: class CKPluginManager * __cdecl CKGetPluginManager(void)
	GetAddress(m_CK2Module, "?CKGetPluginManager@@YAPAVCKPluginManager@@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000175()
{
    //keep
    //function: public: __thiscall XString::~XString(void)
	GetAddress(m_VxMathModule, "??1XString@@QAE@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000176()
{
    //keep
    //function: public: class XString & __thiscall XString::operator=(char const *)
	GetAddress(m_VxMathModule, "??4XString@@QAEAAV0@PBD@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000177()
{
    //keep
    //function: public: static struct VxVector const & __cdecl VxVector::axis0(void)
	GetAddress(m_VxMathModule, "?axis0@VxVector@@SAABU1@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000178()
{
    //redirect
    //need: unsigned long __cdecl RGBAFTOCOLOR(float,float,float,float)
    //point to: unsigned int __cdecl RGBAFTOCOLOR(float,float,float,float)
    //          
	GetAddress(m_VxMathModule, "?RGBAFTOCOLOR@@YAKMMMM@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179()
{
    //keep
    //function: public: static class VxMatrix const & __cdecl VxMatrix::Identity(void)
	GetAddress(m_VxMathModule, "?Identity@VxMatrix@@SAABV1@XZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180()
{
    //keep
    //function: void __cdecl Vx3DMatrixFromRotation(class VxMatrix &,struct VxVector const &,float)
	GetAddress(m_VxMathModule, "?Vx3DMatrixFromRotation@@YAXAAVVxMatrix@@ABUVxVector@@M@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000181()
{
    //keep
    //function: void __cdecl Vx3DRotateVector(struct VxVector *,class VxMatrix const &,struct VxVector const *)
	GetAddress(m_VxMathModule, "?Vx3DRotateVector@@YAXPAUVxVector@@ABVVxMatrix@@PBU1@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000182()
{
    //keep
    //function: void __cdecl Vx3DMultiplyMatrixVector(struct VxVector *,class VxMatrix const &,struct VxVector const *)
	GetAddress(m_VxMathModule, "?Vx3DMultiplyMatrixVector@@YAXPAUVxVector@@ABVVxMatrix@@PBU1@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183()
{
    //keep
    //function: void __cdecl Vx3DMultiplyMatrix(class VxMatrix &,class VxMatrix const &,class VxMatrix const &)
	GetAddress(m_VxMathModule, "?Vx3DMultiplyMatrix@@YAXAAVVxMatrix@@ABV1@1@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184()
{
    //redirect
    //need: unsigned long __cdecl RGBAFTOCOLOR(struct VxColor const *)
    //point to: unsigned int __cdecl RGBAFTOCOLOR(struct VxColor const *)
    //          
	GetAddress(m_VxMathModule, "?RGBAFTOCOLOR@@YAKPBUVxColor@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000185()
{
    //keep
    //function: void __cdecl Vx3DInverseMatrix(class VxMatrix &,class VxMatrix const &)
	GetAddress(m_VxMathModule, "?Vx3DInverseMatrix@@YAXAAVVxMatrix@@ABV1@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000186()
{
    //keep
    //function: void __cdecl Vx3DMultiplyMatrix4(class VxMatrix &,class VxMatrix const &,class VxMatrix const &)
	GetAddress(m_VxMathModule, "?Vx3DMultiplyMatrix4@@YAXAAVVxMatrix@@ABV1@1@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000187()
{
    //keep
    //function: void __cdecl Vx3DMultiplyMatrixVector4(class VxVector4 *,class VxMatrix const &,struct VxVector const *)
	GetAddress(m_VxMathModule, "?Vx3DMultiplyMatrixVector4@@YAXPAVVxVector4@@ABVVxMatrix@@PBUVxVector@@@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000188()
{
    //keep
    //function: public: static int __cdecl VxIntersect::AABBAABB(struct VxBbox const &,struct VxBbox const &)
	GetAddress(m_VxMathModule, "?AABBAABB@VxIntersect@@SAHABUVxBbox@@0@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000189()
{
    //keep
    //function: unsigned long __cdecl GetProcessorFeatures(void)
	GetAddress(m_VxMathModule, "?GetProcessorFeatures@@YAKXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000190()
{
    //keep
    //function: public: void __thiscall VxVector::Normalize(void)
	GetAddress(m_VxMathModule, "?Normalize@VxVector@@QAEXXZ");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000191()
{
    //keep
    //function: void __cdecl Vx3DMatrixFromEulerAngles(class VxMatrix &,float,float,float)
	GetAddress(m_VxMathModule, "?Vx3DMatrixFromEulerAngles@@YAXAAVVxMatrix@@MMM@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000192()
{
    //keep
    //function: public: __thiscall XString::XString(int)
	GetAddress(m_VxMathModule, "??0XString@@QAE@H@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000193()
{
    //keep
    //function: char __cdecl VxScanCodeToAscii(unsigned long,unsigned char * const)
	GetAddress(m_VxMathModule, "?VxScanCodeToAscii@@YADKQAE@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000194()
{
    //keep
    //function: public: __thiscall XString::XString(char const *,int)
	GetAddress(m_VxMathModule, "??0XString@@QAE@PBDH@Z");
	__asm JMP EAX;
}



NORMALEXPORT void func000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000195()
{
    //keep
    //function: public: static struct VxVector const & __cdecl VxVector::axisY(void)
	GetAddress(m_VxMathModule, "?axisY@VxVector@@SAABU1@XZ");
	__asm JMP EAX;
}

